import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os
from dotenv import load_dotenv
import sys
sys.path.append('../..')
from backend.models import db, Driver, Order, Subscription, SubscriptionPlan
from backend.services.subscription import check_subscription
from backend.services.geo import calculate_route
from datetime import datetime

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def check_active_subscription(driver_id: int) -> bool:
    """Check if driver has active subscription"""
    subscription = Subscription.query.filter_by(
        driver_id=driver_id,
        status='active'
    ).first()
    return bool(subscription and subscription.end_date > datetime.utcnow())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler"""
    driver = Driver.query.filter_by(telegram_id=str(update.effective_user.id)).first()
    
    if not driver:
        await update.message.reply_text(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    context.user_data['driver'] = driver
    
    if not await check_active_subscription(driver.id):
        # Show subscription plans
        plans = SubscriptionPlan.query.filter_by(is_active=True).all()
        keyboard = []
        for plan in plans:
            keyboard.append([InlineKeyboardButton(
                f"{plan.name} - {plan.price}‚ÇΩ/{plan.duration_days} –¥–Ω–µ–π",
                callback_data=f"subscribe_{plan.id}"
            )])
        
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    keyboard = [
        [KeyboardButton("üöó –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"), KeyboardButton("üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üí∞ –ü–æ–¥–ø–∏—Å–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def start_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle shift start"""
    driver = context.user_data.get('driver')
    if not driver:
        await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    if not await check_active_subscription(driver.id):
        await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
        return
    
    driver.status = 'online'
    db.session.commit()
    
    keyboard = [
        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
        [KeyboardButton("‚è∏ –ü–µ—Ä–µ—Ä—ã–≤"), KeyboardButton("üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.",
        reply_markup=reply_markup
    )

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle received location"""
    driver = context.user_data.get('driver')
    if not driver or driver.status != 'online':
        return
    
    location = update.message.location
    driver.current_location_lat = location.latitude
    driver.current_location_lon = location.longitude
    db.session.commit()
    
    # Check for nearby orders
    orders = Order.query.filter_by(
        status='pending',
        car_class=driver.car_class
    ).all()
    
    if not orders:
        await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
        return
    
    # Show available orders
    for order in orders:
        route = await calculate_route(
            {'lat': driver.current_location_lat, 'lon': driver.current_location_lon},
            {'lat': order.pickup_location_lat, 'lon': order.pickup_location_lon}
        )
        
        keyboard = [[InlineKeyboardButton(
            "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
            callback_data=f"accept_order_{order.id}"
        )]]
        
        await update.message.reply_text(
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n"
            f"–û—Ç: {order.pickup_address}\n"
            f"–î–æ: {order.dropoff_address}\n"
            f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–ª–∏–µ–Ω—Ç–∞: {route['distance']}–∫–º\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {order.estimated_price}‚ÇΩ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle order acceptance"""
    query = update.callback_query
    order_id = int(query.data.split('_')[-1])
    driver = context.user_data.get('driver')
    
    order = Order.query.get(order_id)
    if not order or order.status != 'pending':
        await query.edit_message_text("–ó–∞–∫–∞–∑ —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    order.driver_id = driver.id
    order.status = 'accepted'
    driver.status = 'busy'
    db.session.commit()
    
    keyboard = [[InlineKeyboardButton(
        "üöó –ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É",
        callback_data=f"start_ride_{order.id}"
    )]]
    
    await query.edit_message_text(
        f"–ó–∞–∫–∞–∑ #{order.id} –ø—Ä–∏–Ω—è—Ç!\n"
        f"–°–ª–µ–¥—É–π—Ç–µ –∫ –∫–ª–∏–µ–Ω—Ç—É: {order.pickup_address}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def main():
    """Start the bot"""
    # Create application
    application = Application.builder().token(os.getenv('DRIVER_BOT_TOKEN')).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^üöó –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É$"), start_shift))
    application.add_handler(MessageHandler(filters.LOCATION, location_handler))
    application.add_handler(CallbackQueryHandler(accept_order, pattern="^accept_order_"))
    
    # Start the bot
    application.run_polling()

if __name__ == '__main__':
    main()
